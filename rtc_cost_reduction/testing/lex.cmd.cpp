#line 2 "lex.cmd.cpp"

#line 4 "lex.cmd.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cmd_create_buffer
#define yy_delete_buffer cmd_delete_buffer
#define yy_scan_buffer cmd_scan_buffer
#define yy_scan_string cmd_scan_string
#define yy_scan_bytes cmd_scan_bytes
#define yy_init_buffer cmd_init_buffer
#define yy_flush_buffer cmd_flush_buffer
#define yy_load_buffer_state cmd_load_buffer_state
#define yy_switch_to_buffer cmd_switch_to_buffer
#define yypush_buffer_state cmdpush_buffer_state
#define yypop_buffer_state cmdpop_buffer_state
#define yyensure_buffer_stack cmdensure_buffer_stack
#define yy_flex_debug cmd_flex_debug
#define yyin cmdin
#define yyleng cmdleng
#define yylex cmdlex
#define yylineno cmdlineno
#define yyout cmdout
#define yyrestart cmdrestart
#define yytext cmdtext
#define yywrap cmdwrap
#define yyalloc cmdalloc
#define yyrealloc cmdrealloc
#define yyfree cmdfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define cmd_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer cmd_create_buffer
#endif

#ifdef yy_delete_buffer
#define cmd_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer cmd_delete_buffer
#endif

#ifdef yy_scan_buffer
#define cmd_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer cmd_scan_buffer
#endif

#ifdef yy_scan_string
#define cmd_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string cmd_scan_string
#endif

#ifdef yy_scan_bytes
#define cmd_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes cmd_scan_bytes
#endif

#ifdef yy_init_buffer
#define cmd_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer cmd_init_buffer
#endif

#ifdef yy_flush_buffer
#define cmd_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer cmd_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define cmd_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state cmd_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define cmd_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer cmd_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define cmdpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state cmdpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define cmdpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state cmdpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define cmdensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack cmdensure_buffer_stack
#endif

#ifdef yylex
#define cmdlex_ALREADY_DEFINED
#else
#define yylex cmdlex
#endif

#ifdef yyrestart
#define cmdrestart_ALREADY_DEFINED
#else
#define yyrestart cmdrestart
#endif

#ifdef yylex_init
#define cmdlex_init_ALREADY_DEFINED
#else
#define yylex_init cmdlex_init
#endif

#ifdef yylex_init_extra
#define cmdlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra cmdlex_init_extra
#endif

#ifdef yylex_destroy
#define cmdlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy cmdlex_destroy
#endif

#ifdef yyget_debug
#define cmdget_debug_ALREADY_DEFINED
#else
#define yyget_debug cmdget_debug
#endif

#ifdef yyset_debug
#define cmdset_debug_ALREADY_DEFINED
#else
#define yyset_debug cmdset_debug
#endif

#ifdef yyget_extra
#define cmdget_extra_ALREADY_DEFINED
#else
#define yyget_extra cmdget_extra
#endif

#ifdef yyset_extra
#define cmdset_extra_ALREADY_DEFINED
#else
#define yyset_extra cmdset_extra
#endif

#ifdef yyget_in
#define cmdget_in_ALREADY_DEFINED
#else
#define yyget_in cmdget_in
#endif

#ifdef yyset_in
#define cmdset_in_ALREADY_DEFINED
#else
#define yyset_in cmdset_in
#endif

#ifdef yyget_out
#define cmdget_out_ALREADY_DEFINED
#else
#define yyget_out cmdget_out
#endif

#ifdef yyset_out
#define cmdset_out_ALREADY_DEFINED
#else
#define yyset_out cmdset_out
#endif

#ifdef yyget_leng
#define cmdget_leng_ALREADY_DEFINED
#else
#define yyget_leng cmdget_leng
#endif

#ifdef yyget_text
#define cmdget_text_ALREADY_DEFINED
#else
#define yyget_text cmdget_text
#endif

#ifdef yyget_lineno
#define cmdget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno cmdget_lineno
#endif

#ifdef yyset_lineno
#define cmdset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno cmdset_lineno
#endif

#ifdef yywrap
#define cmdwrap_ALREADY_DEFINED
#else
#define yywrap cmdwrap
#endif

#ifdef yyalloc
#define cmdalloc_ALREADY_DEFINED
#else
#define yyalloc cmdalloc
#endif

#ifdef yyrealloc
#define cmdrealloc_ALREADY_DEFINED
#else
#define yyrealloc cmdrealloc
#endif

#ifdef yyfree
#define cmdfree_ALREADY_DEFINED
#else
#define yyfree cmdfree
#endif

#ifdef yytext
#define cmdtext_ALREADY_DEFINED
#else
#define yytext cmdtext
#endif

#ifdef yyleng
#define cmdleng_ALREADY_DEFINED
#else
#define yyleng cmdleng
#endif

#ifdef yyin
#define cmdin_ALREADY_DEFINED
#else
#define yyin cmdin
#endif

#ifdef yyout
#define cmdout_ALREADY_DEFINED
#else
#define yyout cmdout
#endif

#ifdef yy_flex_debug
#define cmd_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug cmd_flex_debug
#endif

#ifdef yylineno
#define cmdlineno_ALREADY_DEFINED
#else
#define yylineno cmdlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 48
#define YY_END_OF_BUFFER 49
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[559] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   49,   48,    1,   48,
       48,   48,   48,   48,   48,   28,   48,   48,   48,   29,
       48,   48,   48,   30,   48,   48,   48,   31,   48,   48,
       48,   48,   48,   33,   48,   48,   48,   34,   48,   48,
       48,   35,   48,   48,   48,   36,   48,   48,   48,   37,
       48,   48,   48,   38,   44,   45,   46,   47,   48,   48,

       48,   39,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,    1,    0,
        0,    0,    0,   28,   28,   28,    0,    0,   29,   29,
       29,    0,    0,   30,   30,   30,    0,    0,   31,   31,
       31,    0,   32,    0,   33,   33,   33,    0,    0,   34,
       34,   34,    0,    0,   35,   35,   35,    0,    0,   36,
       36,   36,    0,    0,   37,   37,   37,    0,    0,   38,
       38,   38,    0,   44,   45,   46,   47,    0,   39,   39,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
        0,   28,   29,    0,   29,   30,    0,   30,   31,    0,
       31,   33,    0,   33,   34,    0,   34,   35,    0,   35,
       36,    0,   36,   37,    0,   37,   38,    0,   38,   39,
        0,   39,    0,    0,    0,   40,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   40,   40,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   27,   40,
        0,   40,    0,    0,    0,   41,    0,    0,    0,    0,
        0,   42,    0,    0,   42,    0,   42,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    6,    0,
        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
       21,    0,    0,   41,   41,    0,   42,   42,   42,    0,
       42,   42,    0,   42,   42,   42,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   11,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
        0,   41,   42,    0,   42,   42,    0,   42,   42,   42,
        0,   42,    0,    0,    0,    0,    0,    0,    0,   22,
        0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,   42,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   26,    0,    0,    0,    7,    0,    0,    3,
        4,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
        8,    0,    0,   10,    0,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
       43,    0,    0,   16,   15,    0,    2,    0,   43,   43,
        0,    0,    0,   43,    0,   43,    0,    0,    0,    0,
       18,    0,    0,    0,    0,    0,   23,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    4,    1,    5,    6,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,    1,    1,
        1,    1,    1,    1,   10,   10,   10,   10,   11,   10,
       10,   10,   10,   10,   10,   12,   10,   10,   13,   10,
       10,   14,   10,   10,   10,   10,   10,   15,   10,   10,
        1,    1,    1,    1,   10,    1,   16,   17,   18,   19,

       20,   21,   22,   23,   24,   10,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[41] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    3,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[569] =
    {   0,
        0,    1,    4,    5,    8,   14,   23,   33,   39,   45,
       51,   57,   61,   64,   76,   94,  100,  106,   18,   27,
      112,  118,  124,  130,  136,  142,  148,  154,  162,  171,
      180,  189,  198,  207,  216,  225,  232,  238,  244,  250,
      256,  262,  268,  274,  280,  286, 1343, 1344, 1339, 1336,
     1305, 1310,   62,   66, 1330,  287,   77,   83, 1329,  291,
       86,  295, 1328,  298,  302,  307, 1327,  308,  292,  302,
      314,  318, 1326,  319,  323,  327, 1325,  330,  336,  340,
     1324,  341,  345,  349, 1323,  352,  356,  360, 1322,  363,
      367,  371, 1321,  374,    0,    0,    0,    0,  378,  382,

     1320,  385,  389,  393, 1319,  398,  394,  405, 1318,  408,
      414,  418, 1317,  421,  425,  429, 1316,  432, 1320,  436,
     1304, 1295, 1312,  436,  438,  440,  457, 1311,  468,  467,
      469,  477, 1310,  484,  483,  485,  493, 1309,  500,  499,
      501,  509, 1344, 1308,  516,  515,  517,  525, 1307,  532,
      531,  533,  541, 1306,  548,  547,  549,  557, 1305,  564,
      563,  565,  573, 1304,  580,  579,  581,  589, 1303,  596,
      595,  597,  605,    0,    0,    0,    0, 1302,  612,  611,
      613,  621, 1301,  628,  632,  636,  645,  650, 1300,  653,
      655,  660,  673,  678, 1299,  679,  683,  687,  696,  701,

     1298,  704,  706,  711,  724,  729, 1289, 1288, 1287, 1270,
     1285,  719, 1284,  374,  460, 1279, 1274, 1271, 1280,  728,
     1287, 1286,  730, 1285, 1284,  736, 1283, 1282,  738, 1281,
     1280,  744, 1279, 1278,  746, 1277, 1276,  751, 1275, 1274,
      752, 1273, 1272,  757, 1271, 1270,  759, 1269, 1268,  765,
     1267, 1266,  772,  494, 1265,  776, 1264,  507,  782,  526,
     1263,  792, 1262,  540,  786,  558, 1261,  799, 1260,  571,
      806,  590, 1259,  812, 1258,  604, 1247, 1228, 1229, 1242,
     1239, 1228, 1225,   17, 1238, 1218, 1221, 1235, 1222, 1226,
     1220, 1217, 1226, 1217,  814,  816,  770,  822,  830,  839,

      844,  820,  849,  854,  862,  871,  872,  876,  885,  890,
     1223, 1223, 1226, 1214, 1216, 1227, 1224,  384, 1206, 1203,
     1210, 1182, 1182, 1174, 1169, 1171, 1160, 1161, 1344,  889,
     1168, 1163,  894,  622, 1158,  900, 1144,  662,  911,  666,
     1136,  915,  924,  932,  937,  945,  955,  715,  956,  960,
      719, 1130,  966, 1129,  800, 1131, 1100, 1344, 1344, 1103,
     1088, 1089, 1088, 1075, 1344, 1076,  877, 1079, 1087, 1070,
     1073, 1032, 1031,  970,  971,  950,  988,  977,  987,  979,
      994, 1005, 1013, 1018, 1026, 1047, 1036, 1044, 1046, 1051,
     1059, 1031, 1017, 1006, 1009, 1007, 1344,  994, 1011,  987,

      992,  975,  985,  969,  341,  951,  920,  914,  904,  995,
      919,  910, 1061,  902,  891, 1062,  734, 1068, 1079, 1069,
      780, 1085, 1087,  855,  870, 1095,  864,  808,  832, 1344,
      851,  831, 1344,  841,  815,  807,  792,  770,  796,  762,
      749, 1344,  745,  733,  686, 1105, 1109, 1113, 1122, 1127,
      700,  681,  671,  666,  660,  662,  656,  642, 1101,  622,
      618,  614, 1344,  633, 1134,  863,  627, 1140,  619,  904,
      596,  566, 1344,  553,  535,  516, 1344,  526,  489, 1344,
     1344, 1344,  471,  464,  449,  437, 1142, 1148, 1159, 1153,
      444,  440,  431, 1344,  422,  403,  396,  387,  358,  369,

      355, 1162,  880,  370, 1166,  362,  917, 1344,  336,  323,
     1344,  317,  302, 1344,  273, 1344,  258, 1170, 1176, 1187,
     1193,  255,  249,  247,  244, 1344,  223, 1191,  938,  243,
     1197,  237,  925, 1344, 1344,  212, 1344,  156, 1196, 1198,
     1215,  135,  116, 1202,  135,  129,  103,   91,   85,   97,
     1344,   75,   67,   65,   52,   45, 1344, 1344, 1223, 1226,
     1229, 1232, 1235,   55,   49,   37,   12, 1238
    } ;

static const flex_int16_t yy_def[569] =
    {   0,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  560,  560,
      561,  561,  562,  562,  563,  563,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  564,  565,  566,  567,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  564,  565,  566,  567,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  568,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  568,  558,  568,  568,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  568,  558,
      558,  558,  558,  558,  568,  568,  568,  558,  568,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  568,  558,  558,  558,
      558,  558,  558,  568,  568,  382,  568,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  568,  568,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  568,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,    0,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558
    } ;

static const flex_int16_t yy_nxt[1385] =
    {   0,
      558,  558,   49,   49,   50,   50,   49,   49,   50,   50,
       49,   53,   54,   55,  177,   56,   49,   53,   54,   55,
       49,   56,   50,   51,   51,   49,   57,   58,   59,   49,
       60,   50,  318,   52,   52,   49,   57,   58,   59,  176,
       60,   49,   61,   62,   63,  319,   64,   49,   61,   62,
       63,  175,   64,   49,   65,   66,   67,  174,   68,   49,
       65,   66,   67,   49,   68,   50,   49,  123,   50,  124,
      120,  123,   69,  124,   70,   69,  557,   70,   49,   71,
       72,   73,  128,   74,  129,  556,   69,  120,  128,   69,
      129,  133,   70,  134,  555,   70,   49,   71,   72,   73,

      554,   74,   49,   75,   76,   77,  553,   78,   49,   75,
       76,   77,  552,   78,   49,   79,   80,   81,  551,   82,
       49,   79,   80,   81,  550,   82,   49,   83,   84,   85,
      549,   86,   49,   83,   84,   85,  546,   86,   49,   87,
       88,   89,  546,   90,   49,   87,   88,   89,  548,   90,
       49,   91,   92,   93,  547,   94,   49,   91,   92,   93,
      543,   94,   48,   48,   49,   48,   50,   48,   48,   48,
       48,   48,   48,   49,   48,   50,   48,   48,   48,   48,
       48,   48,   49,   48,   50,   48,   48,   48,   48,   48,
       48,   49,   48,   50,   48,   48,   48,   48,   48,   48,

       49,   48,   50,   48,   48,   48,   48,   48,   48,   49,
       48,   50,   48,   48,   48,   48,   48,   48,   49,   48,
       50,   48,   48,   48,   48,   48,   48,   49,   48,   50,
       48,   48,   48,   48,   49,   99,  100,  101,  542,  102,
       49,   99,  100,  101,  533,  102,   49,  103,  104,  105,
      539,  106,   49,  103,  104,  105,  538,  106,   49,  107,
      108,  109,  537,  110,   49,  107,  108,  109,  536,  110,
       49,  111,  112,  113,  535,  114,   49,  111,  112,  113,
      534,  114,   49,  115,  116,  117,  527,  118,   49,  115,
      116,  117,  126,  118,  124,  526,  131,  127,  129,  120,

      133,  132,  134,  136,  143,  134,  127,  138,  137,  139,
      132,  120,  138,  141,  139,  139,  143,  137,  142,  144,
      143,  145,  120,  144,  147,  145,  145,  142,  149,  148,
      150,  120,  149,  525,  150,  152,  524,  150,  148,  143,
      153,  154,  523,  155,  120,  154,  157,  155,  155,  153,
      159,  158,  160,  120,  159,  522,  160,  162,  440,  160,
      158,  164,  163,  165,  120,  164,  441,  165,  167,  507,
      165,  163,  169,  168,  170,  120,  169,  518,  170,  172,
      517,  170,  168,  178,  173,  179,  120,  178,  516,  179,
      181,  515,  179,  173,  183,  182,  184,  120,  183,  189,

      184,  190,  287,  186,  182,  184,  187,  288,  188,  120,
      189,  363,  190,  192,  193,  190,  364,  188,  194,  195,
      514,  196,  120,  195,  513,  196,  198,  194,  196,  199,
      201,  200,  202,  120,  201,  512,  202,  204,  205,  202,
      200,  126,  206,  124,  511,  125,  127,  220,  127,  510,
      127,  206,  207,  208,  209,  127,  210,  127,  509,  127,
      221,  221,  211,  508,  222,  212,  501,  213,  214,  215,
      500,  216,  217,  131,  130,  129,  223,  132,  132,  132,
      224,  224,  289,  290,  225,  499,  132,  132,  132,  136,
      135,  134,  226,  137,  137,  137,  227,  227,  498,  255,

      228,  256,  137,  137,  137,  141,  140,  139,  229,  142,
      142,  142,  230,  230,  258,  187,  231,  497,  142,  142,
      142,  147,  146,  145,  232,  148,  148,  148,  233,  233,
      496,  261,  234,  262,  148,  148,  148,  152,  151,  150,
      235,  153,  153,  153,  236,  236,  193,  264,  237,  495,
      153,  153,  153,  157,  156,  155,  238,  158,  158,  158,
      239,  239,  494,  267,  240,  268,  158,  158,  158,  162,
      161,  160,  241,  163,  163,  163,  242,  242,  270,  199,
      243,  493,  163,  163,  163,  167,  166,  165,  244,  168,
      168,  168,  245,  245,  492,  273,  246,  274,  168,  168,

      168,  172,  171,  170,  247,  173,  173,  173,  248,  248,
      205,  276,  249,  491,  173,  173,  173,  181,  180,  179,
      250,  182,  182,  182,  251,  251,  470,  335,  252,  336,
      182,  182,  182,  186,  487,  184,  187,  486,  188,  185,
      187,  485,  188,  253,  187,  484,  188,  188,  254,  254,
      255,  188,  256,  257,  257,  188,  483,  258,  192,  193,
      190,  193,  191,  194,  478,  194,  193,  259,  300,  338,
      194,  341,  194,  342,  194,  477,  260,  260,  261,  194,
      262,  263,  263,  476,  198,  264,  196,  199,  475,  200,
      197,  199,  474,  200,  265,  199,  473,  200,  200,  266,

      266,  267,  200,  268,  269,  269,  200,  472,  270,  204,
      205,  202,  205,  203,  206,  471,  206,  205,  271,  464,
      341,  206,  349,  206,  352,  206,  353,  272,  272,  273,
      206,  274,  275,  275,  282,  220,  276,  223,  127,  341,
      132,  418,  283,  226,  284,  229,  137,  127,  142,  132,
      285,  232,  463,  235,  148,  137,  153,  142,  238,  241,
      462,  158,  163,  148,  244,  153,  247,  168,  461,  173,
      158,  163,  250,  331,  331,  182,  168,  332,  173,  253,
      187,  296,  188,  256,  182,  341,  297,  422,  193,  259,
      460,  188,  194,  265,  199,  297,  200,  299,  300,  262,

      459,  194,  301,  458,  304,  200,  305,  355,  309,  306,
      457,  301,  205,  271,  391,  428,  206,  308,  306,  274,
      309,  295,  310,  330,  297,  206,  297,  339,  300,  298,
      306,  310,  301,  297,  456,  297,  300,  333,  455,  306,
      301,  301,  334,  334,  335,  454,  336,  337,  337,  301,
      453,  338,  340,  340,  341,  452,  342,  343,  343,  344,
      425,  345,  426,  451,  306,  343,  343,  346,  467,  347,
      468,  428,  306,  306,  348,  348,  341,  447,  349,  307,
      309,  306,  310,  350,  309,  504,  310,  505,  351,  351,
      352,  310,  353,  354,  354,  310,  330,  355,  415,  297,

      300,  333,  401,  402,  301,  375,  403,  336,  297,  415,
      376,  470,  449,  301,  343,  343,  344,  412,  377,  376,
      379,  306,  342,  489,  507,  380,  412,  340,  340,  341,
      306,  342,  533,  520,  380,  340,  340,  341,  445,  381,
      343,  343,  382,  530,  345,  531,  444,  383,  343,  343,
      344,  443,  384,  411,  411,  306,  383,  412,  343,  343,
      385,  386,  347,  387,  306,  383,  388,  350,  309,  442,
      310,  390,  391,  353,  383,  388,  392,  374,  410,  310,
      376,  376,  414,  414,  378,  392,  415,  380,  439,  376,
      376,  343,  343,  382,  413,  377,  380,  380,  383,  379,

      438,  381,  410,  437,  380,  376,  380,  383,  340,  340,
      341,  436,  416,  380,  376,  380,  417,  417,  341,  435,
      418,  343,  343,  382,  380,  384,  434,  433,  383,  343,
      343,  344,  432,  419,  427,  427,  383,  383,  428,  343,
      343,  382,  431,  387,  430,  383,  388,  421,  421,  341,
      429,  422,  391,  389,  420,  388,  392,  391,  423,  409,
      408,  392,  424,  424,  425,  392,  426,  379,  413,  416,
      392,  380,  380,  386,  379,  446,  420,  407,  388,  380,
      380,  380,  343,  343,  382,  406,  419,  388,  380,  383,
      379,  405,  422,  391,  423,  380,  404,  392,  383,  400,

      448,  399,  426,  449,  380,  450,  392,  398,  343,  343,
      382,  397,  446,  396,  450,  388,  447,  449,  479,  450,
      465,  449,  395,  450,  388,  466,  466,  467,  450,  468,
      469,  469,  450,  394,  470,  393,  355,  389,  480,  481,
      482,  465,  449,  378,  450,  488,  489,  468,  489,  487,
      490,  338,  490,  450,  489,  502,  506,  506,  490,  490,
      507,  490,  503,  503,  504,  374,  505,  490,  489,  502,
      332,  519,  490,  505,  520,  332,  521,  518,  520,  329,
      521,  490,  373,  528,  520,  521,  521,  372,  371,  521,
      529,  529,  530,  370,  531,  521,  532,  532,  528,  520,

      533,  521,  540,  539,  531,  544,  541,  541,  541,  544,
      521,  369,  541,  368,  367,  541,  541,  541,  545,  545,
      366,  541,  546,   48,   48,   48,   95,   95,   95,   96,
       96,   96,   97,   97,   97,   98,   98,   98,  303,  365,
      303,  362,  361,  360,  359,  358,  357,  356,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  317,  316,
      315,  314,  313,  312,  311,  276,  307,  270,  302,  264,
      298,  258,  295,  252,  252,  249,  249,  246,  246,  243,
      243,  240,  240,  237,  237,  234,  234,  231,  231,  228,
      228,  225,  225,  222,  222,  294,  293,  292,  291,  286,

      281,  280,  279,  278,  277,  203,  197,  191,  185,  180,
      171,  166,  161,  156,  151,  146,  140,  135,  130,  125,
      219,  218,  119,  203,  197,  191,  185,  180,  171,  166,
      161,  156,  151,  146,  140,  135,  130,  125,  122,  121,
      120,  119,  558,   47,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558
    } ;

static const flex_int16_t yy_chk[1385] =
    {   0,
        0,    0,    1,    2,    1,    2,    3,    4,    3,    4,
        5,    5,    5,    5,  567,    5,    6,    6,    6,    6,
       19,    6,   19,    3,    4,    7,    7,    7,    7,   20,
        7,   20,  284,    3,    4,    8,    8,    8,    8,  566,
        8,    9,    9,    9,    9,  284,    9,   10,   10,   10,
       10,  565,   10,   11,   11,   11,   11,  564,   11,   12,
       12,   12,   12,   13,   12,   13,   14,   53,   14,   53,
       54,   54,   13,   54,   13,   14,  556,   14,   15,   15,
       15,   15,   57,   15,   57,  555,   13,   58,   58,   14,
       58,   61,   13,   61,  554,   14,   16,   16,   16,   16,

      553,   16,   17,   17,   17,   17,  552,   17,   18,   18,
       18,   18,  550,   18,   21,   21,   21,   21,  549,   21,
       22,   22,   22,   22,  548,   22,   23,   23,   23,   23,
      547,   23,   24,   24,   24,   24,  546,   24,   25,   25,
       25,   25,  545,   25,   26,   26,   26,   26,  543,   26,
       27,   27,   27,   27,  542,   27,   28,   28,   28,   28,
      538,   28,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   37,   37,   37,   37,  536,   37,
       38,   38,   38,   38,  532,   38,   39,   39,   39,   39,
      530,   39,   40,   40,   40,   40,  527,   40,   41,   41,
       41,   41,  525,   41,   42,   42,   42,   42,  524,   42,
       43,   43,   43,   43,  523,   43,   44,   44,   44,   44,
      522,   44,   45,   45,   45,   45,  517,   45,   46,   46,
       46,   46,   56,   46,   56,  515,   60,   56,   60,   62,

       62,   60,   62,   64,   69,   64,   56,   65,   64,   65,
       60,   66,   66,   68,   66,   68,   70,   64,   68,   71,
       69,   71,   72,   72,   74,   72,   74,   68,   75,   74,
       75,   76,   76,  513,   76,   78,  512,   78,   74,   70,
       78,   79,  510,   79,   80,   80,   82,   80,   82,   78,
       83,   82,   83,   84,   84,  509,   84,   86,  405,   86,
       82,   87,   86,   87,   88,   88,  405,   88,   90,  506,
       90,   86,   91,   90,   91,   92,   92,  504,   92,   94,
      501,   94,   90,   99,   94,   99,  100,  100,  500,  100,
      102,  499,  102,   94,  103,  102,  103,  104,  104,  107,

      104,  107,  214,  106,  102,  106,  106,  214,  106,  108,
      108,  318,  108,  110,  110,  110,  318,  106,  110,  111,
      498,  111,  112,  112,  497,  112,  114,  110,  114,  114,
      115,  114,  115,  116,  116,  496,  116,  118,  118,  118,
      114,  124,  118,  124,  495,  125,  124,  126,  125,  493,
      126,  118,  120,  120,  120,  124,  120,  125,  492,  126,
      127,  127,  120,  491,  127,  120,  486,  120,  120,  120,
      485,  120,  120,  129,  130,  129,  131,  130,  129,  131,
      132,  132,  215,  215,  132,  484,  130,  129,  131,  134,
      135,  134,  136,  135,  134,  136,  137,  137,  483,  254,

      137,  254,  135,  134,  136,  139,  140,  139,  141,  140,
      139,  141,  142,  142,  258,  258,  142,  479,  140,  139,
      141,  145,  146,  145,  147,  146,  145,  147,  148,  148,
      478,  260,  148,  260,  146,  145,  147,  150,  151,  150,
      152,  151,  150,  152,  153,  153,  264,  264,  153,  476,
      151,  150,  152,  155,  156,  155,  157,  156,  155,  157,
      158,  158,  475,  266,  158,  266,  156,  155,  157,  160,
      161,  160,  162,  161,  160,  162,  163,  163,  270,  270,
      163,  474,  161,  160,  162,  165,  166,  165,  167,  166,
      165,  167,  168,  168,  472,  272,  168,  272,  166,  165,

      167,  170,  171,  170,  172,  171,  170,  172,  173,  173,
      276,  276,  173,  471,  171,  170,  172,  179,  180,  179,
      181,  180,  179,  181,  182,  182,  469,  334,  182,  334,
      180,  179,  181,  184,  467,  184,  184,  464,  184,  185,
      185,  462,  185,  186,  186,  461,  186,  184,  187,  187,
      187,  185,  187,  188,  188,  186,  460,  188,  190,  190,
      190,  191,  191,  190,  458,  191,  192,  192,  338,  338,
      192,  340,  190,  340,  191,  457,  193,  193,  193,  192,
      193,  194,  194,  456,  196,  194,  196,  196,  455,  196,
      197,  197,  454,  197,  198,  198,  453,  198,  196,  199,

      199,  199,  197,  199,  200,  200,  198,  452,  200,  202,
      202,  202,  203,  203,  202,  451,  203,  204,  204,  445,
      348,  204,  348,  202,  351,  203,  351,  205,  205,  205,
      204,  205,  206,  206,  212,  220,  206,  223,  220,  417,
      223,  417,  212,  226,  212,  229,  226,  220,  229,  223,
      212,  232,  444,  235,  232,  226,  235,  229,  238,  241,
      443,  238,  241,  232,  244,  235,  247,  244,  441,  247,
      238,  241,  250,  297,  297,  250,  244,  297,  247,  253,
      253,  256,  253,  256,  250,  421,  256,  421,  259,  259,
      440,  253,  259,  265,  265,  256,  265,  262,  262,  262,

      439,  259,  262,  438,  268,  265,  268,  355,  355,  268,
      437,  262,  271,  271,  428,  428,  271,  274,  268,  274,
      274,  295,  274,  296,  295,  271,  296,  302,  298,  298,
      302,  274,  298,  295,  436,  296,  299,  299,  435,  302,
      299,  298,  300,  300,  300,  434,  300,  301,  301,  299,
      432,  301,  303,  303,  303,  431,  303,  304,  304,  304,
      424,  304,  424,  429,  304,  305,  305,  305,  466,  305,
      466,  427,  305,  304,  306,  306,  306,  425,  306,  307,
      307,  305,  307,  308,  308,  503,  308,  503,  309,  309,
      309,  307,  309,  310,  310,  308,  330,  310,  415,  330,

      333,  333,  367,  367,  333,  336,  367,  336,  330,  414,
      336,  470,  470,  333,  339,  339,  339,  412,  339,  336,
      342,  339,  342,  507,  507,  342,  411,  343,  343,  343,
      339,  343,  533,  533,  342,  344,  344,  344,  409,  344,
      345,  345,  345,  529,  345,  529,  408,  345,  346,  346,
      346,  407,  346,  376,  376,  346,  345,  376,  347,  347,
      347,  349,  347,  349,  346,  347,  349,  350,  350,  406,
      350,  353,  353,  353,  347,  349,  353,  374,  375,  350,
      374,  375,  380,  380,  378,  353,  380,  378,  404,  374,
      375,  377,  377,  377,  379,  377,  378,  379,  377,  381,

      403,  381,  410,  402,  381,  410,  379,  377,  382,  382,
      382,  401,  382,  381,  410,  382,  383,  383,  383,  400,
      383,  384,  384,  384,  382,  384,  399,  398,  384,  385,
      385,  385,  396,  385,  392,  392,  385,  384,  392,  387,
      387,  387,  395,  387,  394,  385,  387,  388,  388,  388,
      393,  388,  389,  389,  386,  387,  389,  390,  390,  373,
      372,  390,  391,  391,  391,  389,  391,  416,  413,  416,
      390,  413,  416,  418,  420,  418,  420,  371,  418,  420,
      413,  416,  419,  419,  419,  370,  419,  418,  420,  419,
      422,  369,  422,  423,  423,  422,  368,  423,  419,  366,

      426,  364,  426,  426,  422,  426,  423,  363,  446,  446,
      446,  362,  446,  361,  426,  446,  447,  447,  459,  447,
      448,  448,  360,  448,  446,  449,  449,  449,  447,  449,
      450,  450,  448,  357,  450,  356,  354,  352,  459,  459,
      459,  465,  465,  341,  465,  468,  468,  468,  487,  487,
      468,  337,  487,  465,  488,  488,  490,  490,  488,  468,
      490,  487,  489,  489,  489,  335,  489,  488,  502,  502,
      332,  505,  502,  505,  505,  331,  505,  518,  518,  328,
      518,  502,  327,  519,  519,  505,  519,  326,  325,  518,
      520,  520,  520,  324,  520,  519,  521,  521,  528,  528,

      521,  528,  531,  539,  531,  540,  539,  531,  540,  544,
      528,  323,  544,  322,  321,  539,  531,  540,  541,  541,
      320,  544,  541,  559,  559,  559,  560,  560,  560,  561,
      561,  561,  562,  562,  562,  563,  563,  563,  568,  319,
      568,  317,  316,  315,  314,  313,  312,  311,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  283,  282,
      281,  280,  279,  278,  277,  275,  273,  269,  267,  263,
      261,  257,  255,  252,  251,  249,  248,  246,  245,  243,
      242,  240,  239,  237,  236,  234,  233,  231,  230,  228,
      227,  225,  224,  222,  221,  219,  218,  217,  216,  213,

      211,  210,  209,  208,  207,  201,  195,  189,  183,  178,
      169,  164,  159,  154,  149,  144,  138,  133,  128,  123,
      122,  121,  119,  117,  113,  109,  105,  101,   93,   89,
       85,   81,   77,   73,   67,   63,   59,   55,   52,   51,
       50,   49,   47,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cmdline.l"
/*********************************************************************
	コマンドライン解析専用 lex - ただしflex専用。
	コンパイルするときは -Pcmd するべし。
	
	yylex()はコマンドラインにエラーがあったら0以外の値を返す。
**********************************************************************/
/*定義部*/
#line 13 "cmdline.l"
// for VC ///////////////////////////////////////
#ifdef _MSC_VER
#	include <io.h>
#	define isatty _isatty
#endif

#	include "testing.h"
	using namespace std;
	using namespace rtc;

#	undef YY_INPUT
#	define YY_INPUT(b, r, ms) (r=cmdinput_local(b,ms))
	int cmdinput_local( char* buf, int max_size );

	////////////////////////////////////////////////
	//ここで使う変数。
	static char* pszInput;
	static testing_env g_env;
#line 1214 "lex.cmd.cpp"

/*以下にコマンドライン処理を記述。*/
#line 1217 "lex.cmd.cpp"

#define INITIAL 0
#define SOURCE_COORD 1
#define SOURCE_POS_X 2
#define SOURCE_POS_Y 3
#define SOURCE_POS_Z 4
#define FREQENCY 5
#define RAY_MODE 6
#define RAY_LENGTH 7
#define STEP_LENGTH 8
#define STEP_TIME 9
#define STEP_COUNT 10
#define PRECISION 11
#define PITCH_ANGLE 12
#define THREAD 13
#define PLOT_MODE 14
#define PLASMA_MODEL 15
#define MAGNET_MODEL 16
#define PLANET_OBJ 17
#define RAYPATH_SEGMENT 18
#define TIME_RANGE 19
#define DATE 20
#define TIME 21
#define CAVITY 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 57 "cmdline.l"


#line 1459 "lex.cmd.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 559 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1344 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "cmdline.l"
/*ignore blanks*/;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "cmdline.l"
{
    BEGIN SOURCE_COORD;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 64 "cmdline.l"
{
	BEGIN SOURCE_POS_X;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 67 "cmdline.l"
{
	BEGIN SOURCE_POS_Y;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "cmdline.l"
{
	BEGIN SOURCE_POS_Z;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "cmdline.l"
{
	BEGIN FREQENCY;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "cmdline.l"
{
	BEGIN RAY_MODE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "cmdline.l"
{
	BEGIN RAY_LENGTH;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "cmdline.l"
{
	BEGIN STEP_LENGTH;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 90 "cmdline.l"
{
	BEGIN STEP_COUNT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "cmdline.l"
{
	BEGIN PITCH_ANGLE;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "cmdline.l"
{
	BEGIN THREAD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 102 "cmdline.l"
{
	BEGIN PRECISION;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 106 "cmdline.l"
{
	BEGIN PLOT_MODE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "cmdline.l"
{
    BEGIN PLASMA_MODEL;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 114 "cmdline.l"
{
    BEGIN MAGNET_MODEL;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "cmdline.l"
{
	BEGIN PLANET_OBJ;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 122 "cmdline.l"
{
	BEGIN RAYPATH_SEGMENT;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "cmdline.l"
{
	BEGIN TIME_RANGE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 130 "cmdline.l"
{
	BEGIN DATE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 134 "cmdline.l"
{
	BEGIN TIME;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 138 "cmdline.l"
{
	BEGIN CAVITY;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 142 "cmdline.l"
{
	g_env.is_plot_startptr = false;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "cmdline.l"
{
    g_env.is_back_trace = true;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 150 "cmdline.l"
{
	++ g_env.is_verbose;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 154 "cmdline.l"
{
	g_env.is_parallel = true;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 159 "cmdline.l"
{
	const std::string str(yytext);
    if( g_env.source_coord != testing_env::source_coord_none )
	{
		/* 複数のモードが指定されている */
		g_env.source_coord = testing_env::source_coord_error;
	}
	else if( str == "euclid" )
	{
	    g_env.source_coord = testing_env::source_coord_euclid;
	}
	else if( str == "polar" )
	{
	    g_env.source_coord = testing_env::source_coord_polar;
	}
	else
	{
	    g_env.source_coord = testing_env::source_coord_error;
	}
	BEGIN 0;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 180 "cmdline.l"
{
	g_env.source_x = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 184 "cmdline.l"
{
	g_env.source_y = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 188 "cmdline.l"
{
	g_env.source_z = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 193 "cmdline.l"
{
	g_env.freq        = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 198 "cmdline.l"
{
	std::string str;

	// 大文字に変換
	{
		std::string tmp( yytext );
		std::string::iterator it;

		for( it = tmp.begin(); it != tmp.end(); ++it ) {
			str.push_back( std::toupper(*it, std::locale() ) );
		}
	}
	if( "LO" == str ){
		g_env.mode = rtc::wave_parameter::LO_MODE;
	}
	else if( "RX" == str ){
		g_env.mode = rtc::wave_parameter::RX_MODE;
	}
	else throw;

	BEGIN 0;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 221 "cmdline.l"
{
	g_env.ray_length = strtod( yytext, NULL );
	BEGIN 0;
};
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 226 "cmdline.l"
{
	g_env.step_length = strtod( yytext, NULL );
	BEGIN 0;
};
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 231 "cmdline.l"
{
	g_env.step_count = static_cast<unsigned>( strtod( yytext, NULL ) );
	BEGIN 0;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 236 "cmdline.l"
{
	g_env.precision = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 241 "cmdline.l"
{
	g_env.pitch_angle = strtod( yytext, NULL ) *(rtc::cnst::pi/180.0);
	BEGIN 0;
};
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 246 "cmdline.l"
{
	g_env.thread = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 251 "cmdline.l"
{
	g_env.ray_segment = strtod( yytext, NULL );
	BEGIN 0;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 256 "cmdline.l"
{
	const std::string str(yytext);
	const std::string::size_type pos = str.find(":");
	const std::string
		tmax = str.substr( 0, pos ),
		tmin = str.substr( pos+1 );

	g_env.time_range.max = strtod( tmax.c_str(), NULL );
	g_env.time_range.min = strtod( tmin.c_str(), NULL );

	BEGIN 0;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 269 "cmdline.l"
{
	const std::string str(yytext);

	const std::string::size_type
		p1 = str.find("/"),
		p2 = str.find("/",p1+1);

	g_env.date_time.year  = strtol( str.substr( 0, p1    ).c_str(), NULL, 10 );
	g_env.date_time.month = strtol( str.substr( p1+1, p2 ).c_str(), NULL, 10 );
	g_env.date_time.day   = strtol( str.substr( p2+1 ).c_str()    , NULL, 10 );

	BEGIN 0;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 283 "cmdline.l"
{
	const std::string str(yytext);

	const std::string::size_type
		p1 = str.find(":"),
		p2 = str.find(".",p1+1);

	g_env.date_time.hour   = strtol( str.substr( 0, p1    ).c_str(), NULL, 10 );
	g_env.date_time.minute = strtol( str.substr( p1+1, p2 ).c_str(), NULL, 10 );
	g_env.date_time.sec    = strtol( str.substr( p2+1 ).c_str()    , NULL, 10 );

	BEGIN 0;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 297 "cmdline.l"
{
	const std::string str(yytext);

	const std::string::size_type
		p1 = str.find("/"),     /* fp/fc */
		p2 = str.find(":",p1+1),/* ilat center */
		p3 = str.find("/",p2+1),/* ilat range  */
		p4 = str.find(":",p3+1),/* mlt  cenver */
		p5 = str.find("/",p4+1),/* mlt  range  */
		p6 = str.find(":",p5+1);/* height upper*/
		/* p6-end : height bottom*/
	
	g_env.cavity.push_back( rtc::cavity(
		strtod( str.substr(   0,p1).c_str(), NULL ),
		strtod( str.substr(p1+1,p2).c_str(), NULL ),
		strtod( str.substr(p2+1,p3).c_str(), NULL ),
		strtod( str.substr(p3+1,p4).c_str(), NULL ),
		strtod( str.substr(p4+1,p5).c_str(), NULL ),
		strtod( str.substr(p5+1,p6).c_str(), NULL ),
		strtod( str.substr(p6+1   ).c_str(), NULL )
	));
	
	BEGIN 0;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 322 "cmdline.l"
{
	const std::string str(yytext);
	if( g_env.exec_mode != testing_env::plot_none )
	{
		/* 複数のモードが指定されている */
		g_env.exec_mode = testing_env::plot_error;
	}
	if( str == "plasma" )
	{
		/* プラズマモデルをプロットする。*/
		g_env.exec_mode = testing_env::plot_plasma;
	}
	else if( str == "magnet" )
	{
		/* 磁場モデルをプロットする。*/
		g_env.exec_mode = testing_env::plot_magnet;
	}
	else if( str == "magnet-trace" )
	{
		/* 磁場モデルをトレースする。*/
		g_env.exec_mode = testing_env::trace_magnet;
	}
	else if( str == "magnet-surface" )
	{
		g_env.exec_mode = testing_env::map_magnet;
	}
	else
	{
		/* レイトレースを行う */
		g_env.exec_mode = testing_env::plot_raypath;
	}
	BEGIN 0;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 356 "cmdline.l"
{
	const std::string str(yytext);

	if( g_env.plasma_model != testing_env::model_null )
	{
		/* 複数のモードが指定されている */
		g_env.plasma_model = testing_env::model_error;
	}
	else if( str == "test_null" )
	{
		g_env.plasma_model = testing_env::model_error;
	}
	else if( str == "simple" )
	{
		g_env.plasma_model = testing_env::model_simple;
	}
	else if( str == "titan_gaussian" )
	{
		g_env.plasma_model = testing_env::model_titan_gaussian;
	}	
	else if( str == "test_simple" )
	{
		g_env.plasma_model = testing_env::model_test_simple;
	}
	else if( str == "europa_plume" )
	{
		g_env.plasma_model = testing_env::model_europa_plume;
	}
	else if( str == "europa_nonplume" )
	{
		g_env.plasma_model = testing_env::model_europa_nonplume;
	}
	else if( str == "ganymede_nonplume" )
	{
		g_env.plasma_model = testing_env::model_ganymede_nonplume;
	}

	else if( str == "sato" )
	{
		g_env.plasma_model = testing_env::model_sato_earth;
	}
	else if( str == "lathys_europa_3d" )
	{
		g_env.plasma_model = testing_env::model_lathys_europa_3d;
	}	
	else if( str == "devine_garrett" )
	{
		g_env.plasma_model = testing_env::model_devine_garrett;
	}
	else if( str != "null" )
	{
		g_env.plasma_model = testing_env::model_error;
	}
	BEGIN 0;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 408 "cmdline.l"
{
	const std::string str(yytext);

	if( g_env.magnet_model != testing_env::model_null )
	{
		/* 複数のモードが指定されている */
		g_env.magnet_model = testing_env::model_error;
	}
    else if( str == "simple" )
	{
		g_env.magnet_model = testing_env::model_simple;
	}
    else if( str == "test_simple" )
	{
		g_env.magnet_model = testing_env::model_test_simple;
	}
	else if( str == "igrf" )
	{
		g_env.magnet_model = testing_env::model_igrf;
	}
	else if( str == "igrf4" )
	{
		g_env.magnet_model = testing_env::model_igrf4;
	}
	else if( str == "vip4" )
	{
		g_env.magnet_model = testing_env::model_vip4;
	}
	else if( str != "null" )
	{
		g_env.magnet_model = testing_env::model_error;
	}
	else if( str != "test_null" )
	{
		g_env.magnet_model = testing_env::model_error;
	}
	BEGIN 0;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 447 "cmdline.l"
{
	const std::string str(yytext);

	if( str == "earth" ){
		g_env.planet = testing_env::planet_earth;
	}
	else if( str == "jupiter" ){
		g_env.planet = testing_env::planet_jupiter;
	}
	else if( str == "benchmark" ){
		g_env.planet = testing_env::planet_benchmark;
	}
	BEGIN 0;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 462 "cmdline.l"
ECHO;
	YY_BREAK
#line 2070 "lex.cmd.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SOURCE_COORD):
case YY_STATE_EOF(SOURCE_POS_X):
case YY_STATE_EOF(SOURCE_POS_Y):
case YY_STATE_EOF(SOURCE_POS_Z):
case YY_STATE_EOF(FREQENCY):
case YY_STATE_EOF(RAY_MODE):
case YY_STATE_EOF(RAY_LENGTH):
case YY_STATE_EOF(STEP_LENGTH):
case YY_STATE_EOF(STEP_TIME):
case YY_STATE_EOF(STEP_COUNT):
case YY_STATE_EOF(PRECISION):
case YY_STATE_EOF(PITCH_ANGLE):
case YY_STATE_EOF(THREAD):
case YY_STATE_EOF(PLOT_MODE):
case YY_STATE_EOF(PLASMA_MODEL):
case YY_STATE_EOF(MAGNET_MODEL):
case YY_STATE_EOF(PLANET_OBJ):
case YY_STATE_EOF(RAYPATH_SEGMENT):
case YY_STATE_EOF(TIME_RANGE):
case YY_STATE_EOF(DATE):
case YY_STATE_EOF(TIME):
case YY_STATE_EOF(CAVITY):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 559 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 559 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 558);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 462 "cmdline.l"

int cmdwrap(){ return 1; }
int cmdinput_local( char* buf, int max_size )
{
	const int nInputLen = strlen( pszInput );
	const int n = max_size > nInputLen ? nInputLen : max_size;
	if( n > 0 )
	{
		memcpy( buf, pszInput, n );
		pszInput += n;
	}
	return n;
}

/*以下にユーザー定義関数を記述。*/

testing_env* parseCmdline( int argc, char* argv[] )
{
	// g_env を初期化。
	g_env.source_x =
	g_env.source_y =
	g_env.source_z = 0.0;

	g_env.freq        = 0;
	g_env.mode        = rtc::wave_parameter::LO_MODE;
	g_env.step_length = rtc::cnst::c;
	g_env.ray_length  = rtc::cnst::c;
	g_env.step_count  = ~0;
	g_env.precision   = 3.74e-4;
	g_env.pitch_angle = 90 * (rtc::cnst::pi/180.0);
	g_env.thread   = 1;
	g_env.ray_segment = 100;

	g_env.is_plot_startptr = true;
	g_env.is_back_trace    = false;
	g_env.is_parallel      = false;
	g_env.is_verbose       = 0;

	g_env.time_range.max   = 1;
	g_env.time_range.min   = 1e-12;

	g_env.date_time.year   = 2000;
	g_env.date_time.month  = 1;
	g_env.date_time.day    = 1;
	g_env.date_time.hour   = 0;
	g_env.date_time.minute = 0;
	g_env.date_time.sec    = 0;

	g_env.exec_mode   = testing_env::plot_none;
	g_env.source_coord = testing_env::source_coord_none;
	g_env.magnet_model = testing_env::model_null;
	g_env.plasma_model = testing_env::model_null;
	g_env.planet       = testing_env::planet_earth;
	
	for( int n = 1; n < argc; n++ )
	{
		pszInput = argv[n];
		if( cmdlex() )
			break;
	}
	return &g_env;
}

void printHelp()
{
	// コマンドラインの使い方を表示。
	std::clog <<
		"libraytrace testing."                                                            "\n"
		"This program has been written in C++, STLport and boost."                        "\n"
		"Copyright(C) 2005-2006 Miyamoto Luisch, PPARC."                                  "\n"
		                                                                                  "\n"
		"Usage: testing [OPTIONS]..."                                                     "\n"
		                                                                                  "\n"
		"--plot    [plot-mode]    "                                                       "\n"
		"--plasma-model [name]    "                                                       "\n"
		"--magnet-model [name]    "                                                       "\n"
		"--source-pos-(x|y|z)     "                                                       "\n"
		"--source-coord [coord]   "                                                       "\n"
		"--freq [frequency]       "                                                       "\n"
		"--ray-mode    (LO|RX)    "                                                       "\n"
		"--ray-length  [length]   "                                                       "\n"
		"--step-length [length]   "                                                       "\n"
		"--step-count  [count]    "                                                       "\n"
		"--pitch       [angle]    "                                                       "\n"
		"--thread      [division] "                                                       "\n"
		"--precision   [prec]     "                                                       "\n"
		"--ray-path-segment [n]   "                                                       "\n"
		"--time-range [max]-[min] "                                                       "\n"
		"--date [year]/[mon]/[day]"                                                       "\n"
		"--time [hour]:[min].[sec]"                                                       "\n"
		"--cavity [cavity params] "                                                       "\n"
		"--verbose                "                                                       "\n"
		"--without-plot-startptr  "                                                       "\n"
		"--back-trace             "                                                       "\n"
		"--parallel               "                                                       "\n"
		                                                                                  "\n"
		"NOTE:"                                                                           "\n"
		"The calculation result is output to stdout, otherwise is output to stderr."      "\n"
		"To file the calculation results and to log the errors (on UNIX)"                 "\n"
		"\t$ ./testing 1> data.dat 2> err.log"                                            "\n"
	<< std::endl;
}

