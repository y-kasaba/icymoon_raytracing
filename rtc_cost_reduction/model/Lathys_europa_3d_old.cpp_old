////////////////////////////////////////////////////////////////////////
// Lathys_europa_3d.cpp
//	This is a library for software uses RAY-TRACING.
//	Copyright (C) 2005 Miyamoto Luisch
#include "StdAfx.h"
#include "lathys_europa_3d.h"
using namespace rtc;
using namespace model::plasma;

// sato_parameter //////////////////////////////////////////////////////
double lathys_europa_3d::getDensity( const vector& point ) const
{

	const double initial_pos[] = {-10000e3, -10000e3, -10000e3}; // [m]
	const int grid_numbser[] = {4, 4, 4}; 
	const double grid_size[] = {5000e3, 5000e3, 5000e3}; // [m]

	const double x = point[0]; // [m]
	const double y = point[1]; // [m]
	const double z = point[2]; // [m]

	const double x2i = x-initial_pos[0];
	const double y2i = y-initial_pos[1];
	const double z2i = z-initial_pos[2];

	const int x_ind = static_cast<int>(x2i/grid_size[0]);
	const int y_ind = static_cast<int>(y2i/grid_size[1]);
	const int z_ind = static_cast<int>(z2i/grid_size[2]);

	const double x2l = x2i - x_ind*grid_size[0];
	const double y2l = y2i - y_ind*grid_size[1];
	const double z2l = z2i - z_ind*grid_size[2];

	const double x2h = grid_size[0] - x2l;
	const double y2h = grid_size[1] - y2l;
	const double z2h = grid_size[2] - z2l;

	const int index_lll = x_ind + grid_numbser[0]*y_ind + grid_numbser[0]*grid_numbser[1]*z_ind;
	const int index_llh = x_ind + grid_numbser[0]*y_ind + grid_numbser[0]*grid_numbser[1]*(z_ind+1);
	const int index_lhl = x_ind + grid_numbser[0]*(y_ind+1) + grid_numbser[0]*grid_numbser[1]*z_ind;
	const int index_lhh = x_ind + grid_numbser[0]*(y_ind+1) + grid_numbser[0]*grid_numbser[1]*(z_ind+1);
	const int index_hll = (x_ind + 1) + grid_numbser[0]*y_ind + grid_numbser[0]*grid_numbser[1]*z_ind;
	const int index_hlh = (x_ind + 1) + grid_numbser[0]*y_ind + grid_numbser[0]*grid_numbser[1]*(z_ind+1);
	const int index_hhl = (x_ind + 1) + grid_numbser[0]*(y_ind+1) + grid_numbser[0]*grid_numbser[1]*z_ind;
	const int index_hhh = (x_ind + 1) + grid_numbser[0]*(y_ind+1) + grid_numbser[0]*grid_numbser[1]*(z_ind+1);

	const double baseParam[] =  {
	0,
	2,
	4,
	6,
	2,
	4,
	6,
	8,
	4,
	6,
	8,
	10,
	6,
	8,
	10,
	12,
	2,
	4,
	6,
	8,
	4,
	6,
	8,
	10,
	6,
	8,
	10,
	12,
	8,
	10,
	12,
	14,
	4,
	6,
	8,
	10,
	6,
	8,
	10,
	12,
	8,
	10,
	12,
	14,
	10,
	12,
	14,
	16,
	6,
	8,
	10,
	12,
	8,
	10,
	12,
	14,
	10,
	12,
	14,
	16,
	12,
	14,
	16,
	18,
};


	double density = (x2h*y2h*z2h*baseParam[index_lll] + x2h*y2h*z2l*baseParam[index_llh] + x2h*y2l*z2h*baseParam[index_lhl] + x2h*y2l*z2l*baseParam[index_lhh] + x2l*y2h*z2h*baseParam[index_hll] + x2l*y2h*z2l*baseParam[index_hlh] + x2l*y2l*z2h*baseParam[index_hhl] + x2l*y2l*z2l*baseParam[index_hhh])/grid_size[0]/grid_size[1]/grid_size[2];

	return density;
}

